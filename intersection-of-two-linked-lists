/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int n1=0,n2=0;
        ListNode* h1 = headA;
        ListNode* h2 = headB;
        while(h1!=NULL || h2!=NULL)
        {
            if(h1!=NULL && h2!=NULL)
            {
                n1++;
                n2++;
                h1=h1->next;
                h2=h2->next;
            }
            else if(h1!=NULL)
            {
                n1++;
                h1=h1->next;
            }
            else
            {
                n2++;
                h2=h2->next;
            }
        }
        h1 = headA;
        h2 = headB;
        
        if(n1>n2)
        {
            while(n1!=n2)
            {
                h1 = h1->next;
                n1--;
            }
        }
        else if(n1<n2)
        {
            while(n2!=n1)
            {
                h2=h2->next;
                n2--;
            }
        }
       // cout<<h1->val<<" "<<h2->val;
        while(h1 && h2 && h1 != h2 )
        {
            h1 = h1->next;
            h2 = h2->next;
        }
       // cout<<h1->next->val;
        if(h1!=NULL)
        return h1;
        else
        return 0;

    }
};
